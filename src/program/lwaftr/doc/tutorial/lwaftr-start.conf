// Minimal example Snabb lwAFTR configuration
// For more details consult the schema: src/lib/yang/snabb-softwire-v3.yang

softwire-config {

  instance {

    // These are the network devices used by Snabb lwAFTR.
    // The external-device is optional, and if omitted lwAFTR
    // will run in on-a-stick mode using a single interface.
    // If both device and external-device are configured then
    // lwAFTR will run in bump-in-the-wire mode where IPv6 traffic
    // from 'device' is forwarded as IPv4 traffic to 'external-device'
    // and vice-versa.
    // Typically devices are specified as PCI-e bus addresses, but
    // we also support Linux interface names for testing puproses.

    device "aftrv6";
    external-device "aftrv4";

    // Snabb lwAFTR processes traffic in one or more queues.
    // Each queue typically uses one dedicated CPU core of
    // the host system.
    // Traffic is distributed across the queues via RSS.

    queue {
      id 0;

      // Each queue must specify the IP and MAC addresses used
      // by its internal and external interfaces, as well as their
      // respective next hop addresses.
      // You can skip ARP/ND lookup by specifying a next hop
      // MAC address instead of an IP address.
      // These settings are usually identical for all queues,
      // but do not have to be.

      // IPv6 interface
      internal-interface {
        ip "fd10::1";
        mac "02:00:00:00:00:02";
        next-hop {
          ip "fd10::10";
          // or: mac "aa:bb:cc:dd:ee:ff";
        }
      }

      // IPv4 interface
      external-interface {
        ip "10.77.0.1";
        mac "02:00:00:00:00:01";
        next-hop {
          ip "10.77.0.10";
          // or: mac "aa:bb:cc:dd:ee:ff";
        }
      }

    }
  }

  // There are also important global interface settings.
  // The most important ones are showcased below:

  // IPv6 interface
  internal-interface {
    mtu 1540; // MTU of the IPv6 interface (note: IPv6 encapsulation overhead!)
    flow-label 42; // Flow label used for IPv6 encapsulation
  }
  
  // IPv4 interface.
  external-interface {
    mtu 1500; // MTU of the IPv4 interface
  }
  
  // Finally, we have to configure the binding table that
  // describes how flows are encapsulated.
  // The binding table below has just one entry (or 'softwire'),
  // but typically a binding table consists of many tens of
  // thousands of softwires.

  binding-table {

    // This binding table entry describes the following
    // address translation:
    // 
    // Packets originating from 198.18.0.1 arrive at the
    // internal (IPv6) interface encapsulated in IPv6 with
    // 2003:1c09:ffe0:100::1 (B4) as the source address and
    // 2003:1b0b:fff9:ffff::4001 (BR) as the destination address,
    // the encapsulation is stripped and the contained IPv4 frame
    // is forwarded via the external interface.
    // 
    // Packets destined to 198.18.0.1 arriving at the
    // external (IPv4) interface are encapsulated in an IPv6 frame
    // with 2003:1b0b:fff9:ffff::4001 (BR) as the source address and
    // 2003:1c09:ffe0:100::1 (B4) as the destination address, and
    // the resulting IPv6 frame is forwarded via the internal interface.
    // 
    // It is further possible to share an IPv4 address among
    // multiple B4 addresses by assigning a PSID. The entry below
    // binds the address 198.18.0.1 exclusively. For information
    // of how to use PSIDs refer to:
    //   src/lib/yang/snabb-softwire-v3.yang

    softwire {
      ipv4 198.18.0.1;
      psid 0;
      b4-ipv6 2003:1c09:ffe0:100::1;
      br-address 2003:1b0b:fff9:ffff::4001;
      port-set {
        psid-length 0;
      }
    }

    // Further binding table entries follow...

  }
}